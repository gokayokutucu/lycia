using System.Text;

internal class Program
{
    private static readonly string[] HeaderLines = new[]
    {
        "// Copyright 2023 Lycia Contributors",
        "// Licensed under the Apache License, Version 2.0",
        "// https://www.apache.org/licenses/LICENSE-2.0"
    };

    private static readonly string[] ExcludeDirParts = new[]
    {
        $"{Path.DirectorySeparatorChar}bin{Path.DirectorySeparatorChar}",
        $"{Path.DirectorySeparatorChar}obj{Path.DirectorySeparatorChar}",
        $"{Path.DirectorySeparatorChar}.git{Path.DirectorySeparatorChar}",
        $"{Path.DirectorySeparatorChar}.vs{Path.DirectorySeparatorChar}",
        $"{Path.DirectorySeparatorChar}packages{Path.DirectorySeparatorChar}"
    };

    private static int Main(string[] args)
    {
        var repoRoot = args.Length > 0 ? Path.GetFullPath(args[0]) : Directory.GetCurrentDirectory();
        if (!Directory.Exists(repoRoot))
        {
            Console.Error.WriteLine($"Path does not exist: {repoRoot}");
            return 2;
        }

        var files = Directory.EnumerateFiles(repoRoot, "*.cs", SearchOption.AllDirectories)
            .Where(p => !ExcludeDirParts.Any(ex => p.Contains(ex)));

        int changed = 0, skipped = 0, failed = 0;

        foreach (var path in files)
        {
            try
            {
                // Read raw to detect BOM
                var bytes = File.ReadAllBytes(path);
                bool hasUtf8Bom = bytes.Length >= 3 && bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF;

                string text = hasUtf8Bom
                    ? Encoding.UTF8.GetString(bytes, 3, bytes.Length - 3)
                    : Encoding.UTF8.GetString(bytes);

                // Determine line ending to use
                string eol = text.Contains("\r\n") ? "\r\n" : "\n";

                // Skip auto-generated files
                var headSample = text.Length > 8000 ? text[..8000] : text;
                if (headSample.IndexOf("<auto-generated", StringComparison.OrdinalIgnoreCase) >= 0)
                {
                    skipped++;
                    continue;
                }

                // Build header strings for comparisons
                string headerLF = string.Join("\n", HeaderLines) + "\n";
                string headerCRLF = string.Join("\r\n", HeaderLines) + "\r\n";

                if (text.StartsWith(headerLF) || text.StartsWith(headerCRLF))
                {
                    skipped++;
                    continue;
                }

                string header = string.Join(eol, HeaderLines) + eol;
                string updated = header + text;

                var encoding = new UTF8Encoding(encoderShouldEmitUTF8Identifier: hasUtf8Bom);
                File.WriteAllText(path, updated, encoding);
                changed++;
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Failed {path}: {ex.Message}");
                failed++;
            }
        }

        Console.WriteLine($"Header insertion complete. Changed: {changed}, Skipped: {skipped}, Failed: {failed}");
        return failed == 0 ? 0 : 1;
    }
}
